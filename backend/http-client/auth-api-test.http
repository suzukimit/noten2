### login
POST http://{{baseUrl}}/login
Accept: application/json
Content-Type: application/json

{
  "username": "test@noten.com",
  "password": "test"
}

> {%
    client.test("should be 200", function() {
        client.assert(response.status === 200);
    });
%}

### login (invalid username)
POST http://{{baseUrl}}/login
Accept: application/json
Content-Type: application/json

{
  "username": "invalid",
  "password": "test"
}

> {%
    client.test("should be 401", function() {
        client.assert(response.status === 401);
    });
%}

### login (invalid password)
POST http://{{baseUrl}}/login
Accept: application/json
Content-Type: application/json

{
  "username": "test@noten.com",
  "password": "invalid"
}

> {%
    client.test("should be 401", function() {
        client.assert(response.status === 401);
    });
%}


### signup (OPTIONS)
OPTIONS http://{{baseUrl}}/signup

> {%
    client.test("should be 200", function() {
        client.assert(response.status === 200);
    });
%}

### signup (OPTIONS with allowed ORIGIN)
OPTIONS http://{{baseUrl}}/signup
Origin: http://localhost:4200

> {%
    client.test("should be 200", function() {
        client.assert(response.status === 200);
    });
%}

### signup (OPTIONS with invalid ORIGIN)
OPTIONS http://{{baseUrl}}/signup
Origin: http://localhost:9999

> {%
    client.test("should be 403", function() {
        client.assert(response.status === 403);
    });
%}

### signup (POST)
POST http://{{baseUrl}}/signup

{
  "email": "{{$random.email}}",
  "password": "test"
}

> {%
    client.test("should be 201", function() {
        client.assert(response.status === 201);
    });
    // 後続のテストで使うために、登録したユーザーのemailを保存
    client.global.set("createdUserEmail", response.body.email);
%}

### login (POST with created user)
POST http://{{baseUrl}}/login
Content-Type: application/json

{
  "username": "{{createdUserEmail}}",
  "password": "test"
}

> {%
    client.test("should be 200", function() {
        client.assert(response.status === 200);
    });
    client.global.set("createdUserToken", response.body.value)
%}

### phrases (GET with created user)
GET http://{{baseUrl}}/phrases
Accept: application/json
Authorization: Bearer {{createdUserToken}}

> {%
    client.test("should be 200", function() {
        client.assert(response.status === 200);
        // OwnerFilterが効いているかを検証
        client.assert(response.body.page.totalElements === 1);
    });
%}

### phrases (GET with invalid token)
GET http://{{baseUrl}}/phrases
Accept: application/json
Authorization: Bearer invalid.invalid.invalid

> {%
    client.test("should be 401", function() {
        client.assert(response.status === 401);
    });
%}

### signup (POST with invalid email)
POST http://{{baseUrl}}/signup

{
  "email": "invalid",
  "password": "test"
}

> {%
    client.test("should be 422", function() {
        client.assert(response.status === 422);
    });
%}

### signup (POST with duplicated email)
POST http://{{baseUrl}}/signup

{
  "email": "test@noten.com",
  "password": "test"
}

> {%
    client.test("should be 409", function() {
        client.assert(response.status === 409);
    });
%}

### signup (POST with empty email)
POST http://{{baseUrl}}/signup

{
  "password": "test"
}

> {%
    client.test("should be 422", function() {
        client.assert(response.status === 422);
    });
%}

### signup (POST with empty password)
POST http://{{baseUrl}}/signup

{
  "email": "test@noten.com"
}

> {%
    client.test("should be 422", function() {
        client.assert(response.status === 422);
    });
%}

### signup (POST with empty body)
POST http://{{baseUrl}}/signup

{}

> {%
    client.test("should be 422", function() {
        client.assert(response.status === 422);
    });
%}

### TODOs
# 不正なtokenでリソースにアクセス -> 401
# 不正なtoken（期限切れ）でリソースにアクセス -> 401
# 不正なtoken（tokenとしては正しいがユーザーが存在しない場合） -> 401
